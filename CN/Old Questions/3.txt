functions of dll: fpeaf
dll is 2nd layer of OSI model
node to node delivery of messafge error free using MAC address

framing:
	takes packets from nl and encapsulates them into frames
	sends each frame bit by bit on hardware
	at receiver end, dll picks up signal from harware and assembles them into frames	
	parts of frame:
		header: contains souce and destination address of frame
		payload: contains message to be delivered
		trailer: contains error detection and correction bits
		flag: marks beginning and end of frame
	types of framing:
		fixed size:
			fixed size of frame acts as delimeter of frame
			doesnt require additional boundary bits to identyi start end of frame
		variable size:
			size of aech frame is different
			additional mechanism are used to mark end of one frame and start of anooreh

physical addressing:
	after frames, adds physical addres(MAC) of sender and receiver in header of frame

error control:
	detects and retransmits damaged/lost frames

access control:
	when 2/more devices are connected to common link, dll protocols determine which device
has control over trhe link at any point of time

flow cotrol:
	if rate at which dat aare consumed by r eceiver is less than rate prodcued by sender,
dll uses flow control mechanism to prevent overruninng the receiver


llc:
	interface between mac and nl
	provides logic for data link
	controls synchronizaiton, flow control and error checking
	identifies which netowrk protocol is being used
	defined by IEEE 802.2

mac:
	provides control for accessing transmission medium
	moves packets from one network medium to another across shared transmision medium
	handles physical addressing ie adding MAC address to frame
	when sending data ato another device, encapsulates higher level frames into frames
appropirate for transmission medium
	deals with actuial control of media
	defined by IEEE 802.X (802.3-ethernet, 802.11-wifi)

framing approach:
bit stuffing: ro differentiate payload and flag, when 0 is followed by consecutive 1's stuff 0
	stuffed bit removed at receiver side

byte stuffing: special byte ESC is stuffed before every byte in message with same pattern as 
	flag byte
	if ESC is found in message byte, another ESC is stuffed beefore it

error detection and control:
	detect and retransmit data frames that might be lost/corrupted during transmission

error and flow control:
simplest protocol:
	no flow/error control
	unidirectional, frames travel in one direction from sender to receiver
	assumed that reciever can immedialite handle frame with negligible processing time
	dll of receiver immediateyl removes header from frame and hands to nl accetsp immediatly

stop and wait protocol:
	data trnasfer in noiseless channel
	senders sends single frame then waits for ack from receiver before sending next packet
	overasll data transmission rate is slow since only one frame is transmitted at a time
	overcame by sliding window protocl

stop and wait ARQ protocol:
	data transfer in noisy channel
	sender sends one frame at atime then wiats for ack from reciver before seding antoher
	when sender detects error, waits for next ack before resending frame
	if erro is detected receiver sends nack to sender for retransmission

go back and ARQ protocolP:
	data transfer in noisy channel
	sliding window protocol where sender sends window of packets to receiver
	receivers sends back ack to indicate succesfful receive of packet
	if sender doesnt receive ack witrhing timeout, it retransmits entire window of packets
	if packet is recived with error, receiver disards and sends nack with squence no.
	if sender doesnt receive ack retransmits entire window of packet
	if sender receives nack retransmits only damaged packets

selective repeat arq protocol:
	sender transmits window of packets i to i+N-1 to receiver and sets time rfor each packet
	waits for ack from receiver
	receiver receives packet and checks for error
	if correct sends ack i+1
	if error,discard and sends nack i
	if sender doesnt receive ack before timer expires, retransmits only that frame
	reset timer for that frame
	wait for ack
	if nack received, sender retransmits only that frame
	reset timer
	wait for ack

piggybacking:
	delay outgoing ACK and attach it to next data paocket
	when data frame arrives, receiver waits and doesnt immeditaely send ACK back
	receiver waits till NL moves to next packet 
	ACK is associated with this outgoing frame
	ACK traavels alobng with necxt frame

multiple acces protocol/channel allocation techniques:
	used for when thre is no dedicated link between sender and receiver, multiple stastions
can access channel simultaneously
	to reduce collision and cross talk

random access protocol: aloha, csma, csma/cd, csma/ca
controlled access: rservation, polling, token passing
channeliation protocls: fdma, tdma, cdma

aloha:
	random access multiple access protocol for wlan
	multiple station can transmit data at same time can cause collision

pure aloha: 
	when station sends data, it waits for ack
	if ack doesnt coem within alotted time, it waits for random time back off time and resend
	since different station wait for differnt time, probabilty of collision decreases
	max throughput =18.4%

slotted aloha:
	time is divied into equal slots and stations can only send data at beginning of slots
	time is diviided into fixed size slots equal to transmission tiome of 1 frame
	if no other station trnsmits in same slot, success
	if 2/mroe transmit in same slot, colssion and retrnasmit after random delay
	amx threoughput =36.8%

csma:
	carrier sense multiple access
	device checks channel first before sending
	if channel busy, wait till free
	collision may occur when 2 stastion transmit at same time

	1 persistent csma:
		station listens to channel
		transmit if idle, wait if busy
		if multiple channel are waiting amd transmit as soon as idle, collision

	non persistent csma:
		stsation listens to channel
		if busy, waits random time then checks again
		if idle, transmits
		reduces chance of collision by not crowding channel right after becoming free

	p persistent csma:
		busy, wait
		idle, transmit with probablity p
		or next for next time slot with probablity 1-p
		right value of p blances collision rate nad delay

csma/cd:
	collision detection
	cs: device listens if channel is idle before sending
	ma: if idle, multiple can access but only one can transmit at a time
	if idle, transmit data
	cd: check channel even while transmitting, if collision, immediately stop
	device send jam signal to inform all edvices about collision
	device waits random time using backoff algorithm to retransmit

csma/ca:
	collsion avoidance for wifi ieee 802.11
	cs: device listens if channel is idle
	interframe space: if idle, device waits small amount of time before proceeding
	random backoff timer: counts down when channel is idle
	transmit data when backoff timer reaches 0
	if data received successfully, receiver sends ACK
	if collision, no ACK, sender tries again

controlled access protocols:
	rigfht to transmit is regulated to avoid collsion

reservation:
	time is divided into slots
	devices reserve time solts in advance before transmitting
	device sends reservation request in special ocntrol slot
	if resrevation accepted, device is assigned a slot to transmit

polling:
	central controller asks each device one by one if want to send data
	if yes send else move to next device

token passing:
	token is special message that circulates in network
	if device has token, it can transmit
	after transmit, pass token to next device

channelization process:
	divides channel into separate logical parts so many uiser can transmit at same time
using different chanels

fdma:
	frequency division multiple access
	divide bandwidth into sperate frequncy band
	each user gets dedicated frequncy channel

tdma:
	time divison mukltiple access
	divide time into slots
	each user transmits in own time slot with same frequncy

cdma:
	code division multiple access
	all users transmit at same time and frequency but unique code to seprate data
hdlc:
	group of communciation protocol fro trnasmiting data between nodes
	bit oriented protocol

types:
nrm:
	primary station sends commands
	secondary station rsponds to  received commands
	used for point to point and multipoint communication
abm:
	each station can send and respond to commands
	used for poinbt to point only

hdlc frame:
	flag: 8 bit marks start and end of frame 01111110
	address: min 8 bit address of receiver 
	control: 8/16 bit containinf flow and error control information
	payload: carries data from netowrk layer
	FCS: 16 bit framce check sequence for error detection, usually crc
	FLag:

types:
	sframe: 10 for flow and error control
	uframe: 11 connection setup
	iframe: 0 file transferring, messaging 