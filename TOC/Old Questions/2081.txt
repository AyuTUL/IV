pda:
pda is a type of automation that uses astack as additional memeory to recognize context free language
	pda=(Q,sigma,gamma,delta,q0,z0,F)
Q: finite set of states
sigma: finite set of input symbols
gamma: finite set of stack alphabets
delta: transisiotn function
q0: starting state, q0 belongs to Q
z0: intial symbol of stack, z0 belongs to gamma
F: set of final states, F subset of Q
pda read inputs symbol. then it looks at top of stack. based on current state,input symbol and top of 
stack, it transitions to a new state  and may push/pop from stack

kleen clousre:
set of all strings with length 0/more over alphabet sigma
sigma*=sigma0 U sigma1 U sigma2...

positive colusre:
set of all strings with length 1/more over alphabet sigma
it odesnt contain empty string spsilon
	+ve = kleen - epsilon
sigma+=sigma1 U sigma2 ...

language of grammar:
The language of a grammar is the set of all strings that can be generated using the production
 rules of the grammar, starting from the start symbol.

Formally, if G is a grammar with start symbol S, then the language generated by G is:
L(G)={w∈Σ∗∣S⇒∗w}
L(G)={w∈Σ∗∣S⇒∗w}

Where:

    ⇒∗⇒∗ means zero or more steps of derivation using production rules.

    ww is a string of terminals (no variables/non-terminals).

episilon closure of state:
set of states that can be reached without reading any inout symobl(reading only epsilon)
from a particular state

mealy vs moore:
output depends on current state and input 	only on current state
output is associated iwth transitions		states
(Q,sigma,del,delta,lambda,q0)
lambda:Qxsigma->del 				lamda:Q->del
output change timimng on taking transition	on entering new state
n oinput n oputput				n input n+1 output
faster output s[eed due to during transiont	slower output speed due to after transition

CNF:
A grammar is in Chomsky Normal Form (CNF) if every production is of the form:
    A→BC (where B and C are non-terminals and not start symbol)
    A→a (a terminal)